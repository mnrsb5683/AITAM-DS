struct Btree{
  struct Btree *left;
  int data; 
  struct Btree *right;
 }*root=NULL;
void inorder(struct Btree *root){
  if(root!=NULL)
  {
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
  }
}
void preorder(struct Btree *root){
  if(root!=NULL)
  {
    printf("%d ",root->data);
    preorder(root->left);
    preorder(root->right);
  }
}
void postorder(struct Btree *root){
  if(root!=NULL)
  {
    postorder(root->left);
    postorder(root->right);
    printf("%d ",root->data);
  }
}
int max(int a,int b){
  return a>b?a:b;
}
int height(struct Btree *root){
  return root==NULL?-1:max(height(root->left), height(root->right))+1;
}
void printLevelOrder(struct Btree *root){
  int h=height(root);
  for(int i=0;i<=h;i++){
     levelOrder(root,i);
  }
}
void levelOrder(struct Btree *root,int level){
  if(root==NULL) return;
  else if(level==0){
    printf("%d ",root->data);
  }
  else{
    levelOrder(root->left,level-1);
    levelOrder(root->right,level-1);
  }
}


int noLeaves(struct Btree *root){
 if(root==NULL) return 0;
 if(root->left==NULL && root->right==NULL)
   return 1;
 return noLeaves(root->left)+noLeaves(root->right);
}

int noNonLeaves(struct Btree *root){
 if(root==NULL) return 0;
 if(root->left==NULL && root->right==NULL)
   return 0;
 return 1+noNonLeaves(root->left) 
         +noNonLeaves(root->right);
}

int fullNode(struct Btree *root){
  if(root==NULL) return 0;
  if(root->left==NULL && root->right==NULL) 
    return 0;
  if(root->left!=NULL && root->right!=NULL) 
    return 1+fullNode(root->left) + 
             fullNode(root->right);
  return fullNode(root->left) + fullNode(root->right);
}