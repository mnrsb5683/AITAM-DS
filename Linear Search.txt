Linear Search:
================================================================
int linearSearch(int a[],int n,int key){
  for(int i=0;i<n;i++){
    if(a[i]==key) return 1;
  }
  return 0;
}
//using recursion
int linearSearch(int a[],int i,int n,int key){
  if(i==n) return 0;
  else if(a[i]==key) return 1;
  return linearSearch(a,i+1,n,key);
}
//on linkedlist
int linearSearch(struct node *head,int key){
   struct node *temp=head;
   while(temp!=NULL){
     if(temp->data==key) return 1;
     temp=temp->next;
   }
   return 0;
}
//on linkedlist using recursion
int linearSearch(struct node *head,int key){
   if(head==NULL) return 0;
   if(head->data==key) return 1;
   return linearSearch(head->next,key);
}

T(n)=T(n-1)+O(1)  ==>O(n)


Binary Search:
==============================================================
int binarySearch(int a[],int n,int key){
  int low=0,high=n-1,mid;
  while(low<=high){
    int mid=(low+high)/2;
    if(a[mid]==key) return 1;
    else if(a[mid]<key) low=mid+1;
    else high=mid-1;
  }
  return 0;
}
//using recursion
int binarySearch(int a[],int low,int high,int key){
   if(low>high) return 0;
   int mid=(low+high)/2;
   if(a[mid]==key) return 1;
   else if(a[mid]<key) 
      return binarySearch(a,mid+1,high,key);
   else 
    return binarySearch(a,low,mid-1,key);
}

T(n)=T(n/2)+O(1) ==> O(log n)

Bubble Sort:
===============================================================
void bubbleSort(int a[],int n){
  for(int i=0;i<n;i++){
    int flag=0;
    for(int j=0;j<n-i-1;j++){
      if(a[j]>a[j+1]){
       int temp=a[j];
       a[j]=a[j+1];
       a[j+1]=temp;
       flag=1;
      }
    }
    if(flag==0) break;
  }
 }

Selection Sort:
===============================================================
void selectionSort(int a[],int n){
  for(int i=0;i<n-1;i++){
    int min=a[i],mi=i;
    for(int j=i+1;j<n;j++){
      if(min>a[j]){
        min=a[j];
        mi=j;
      }
     }
    a[mi]=a[i];
    a[i]=min;
  }
}

Insertion Sort:
===============================================================
void insertionSort(int a[],int n){
  for(int i=1;i<n;i++){
    int key=a[i],j=i-1;
    while(j>=0 && a[j]>key){
      a[j+1]=a[j];
      j--;
    }
    a[j+1]=key;
  }
}

Quick Sort:
=====================================================
void swap(int *x,int *y){
  int temp=*x;
  *x=*y;
  *y=temp;
}
void quickSort(int a[],int low,int high){
  if(low<high){
   int pi=partition(a,low,high);
   quickSort(a,low,pi-1); 
   quickSort(a,pi+1,high);
 }
}
int partition(int a[],int low,int high){
  int pivot=a[high];
  int i=low-1;
  for(int j=low;j<=high-1;j++){
    if(a[j]<pivot){
      i++;
      swap(&a[i],&a[j]);
    }
  }
  swap(&a[i],&a[high]);
  return i+1;
}
Best Case: T(n)=2T(n/2)+O(n) ===>O(nlog n)
Worst Case: T(n)=T(n-1)+O(n) ===> O(n^2)